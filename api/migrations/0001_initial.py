# Generated by Django 4.2 on 2023-04-11 19:38

import api.models
import api.validators
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 50 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=50, unique=True, validators=[api.validators.CustomUnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=20, verbose_name='first name')),
                ('second_name', models.CharField(blank=True, max_length=20, verbose_name='second name')),
                ('patronymic', models.CharField(blank=True, max_length=20, verbose_name='patronymic')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, max_length=254, unique=True, verbose_name='email address')),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, unique=True, verbose_name='phone number')),
                ('is_staff', models.BooleanField(default=False, help_text='Is staff account', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', api.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='CourseGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_number', models.IntegerField(verbose_name='number of course')),
                ('group_number', models.CharField(max_length=10, verbose_name='number of group')),
                ('higher_education_level', models.CharField(blank=True, choices=[('b', 'bachelor'), ('m', 'magistracy'), ('p', 'postgraduate'), ('s', 'specialty')], max_length=1, verbose_name='level of higher education')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, verbose_name='event title')),
                ('description', models.CharField(blank=True, max_length=800, verbose_name='event description')),
                ('event_datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='event datetime')),
            ],
        ),
        migrations.CreateModel(
            name='Map',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('building', models.CharField(blank=True, choices=[('m', 'main building'), ('ex', 'extension building')], max_length=2, verbose_name='building')),
                ('building_level', models.IntegerField(choices=[('m', 'main building'), ('ex', 'extension building')], verbose_name='level of building')),
                ('map_file', models.FilePathField()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_of_enrollment', models.CharField(max_length=4, verbose_name='year of enrollment')),
                ('record_book_number', models.CharField(blank=True, max_length=20, verbose_name='number of student record book')),
                ('courseGroup', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='student_group', to='api.coursegroup')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule_file', models.FilePathField()),
                ('course_group', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='schedule', to='api.coursegroup')),
            ],
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, max_length=100, verbose_name='publication title')),
                ('body_text', models.CharField(blank=True, max_length=800, verbose_name='publication text')),
                ('publication_datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='publication datetime')),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='publication', to='api.event')),
            ],
        ),
        migrations.CreateModel(
            name='Professor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(max_length=50, verbose_name='professor department')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='professor', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=100, verbose_name='message text')),
                ('message_datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='message datetime')),
                ('user_from', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='massageFrom', to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('user_to', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='messageTo', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
    ]
